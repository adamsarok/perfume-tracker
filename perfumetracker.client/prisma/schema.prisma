// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["linux-musl-openssl-3.0.x", "windows", "debian-openssl-1.1.x"]
  previewFeatures = ["relationJoins"] //TODO: setup "tracing"]
} //TODO: relationJoins generates some pretty "interesting" queries even for simple joins. check if it is really faster than app level join

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Perfume {
  id Int @id @default(autoincrement())
  house String
  perfume String
  rating Float
  notes String @default("")
  ml Int @default(2)
  imageObjectKey String @default("")
  winter Boolean @default(true)
  spring Boolean @default(true)
  summer Boolean @default(true)
  autumn Boolean @default(true)
  worn PerfumeWorn[]
  suggested PerfumeSuggested[]
  tags PerfumeTag[]
}

model PerfumeWorn {
  id Int @id @default(autoincrement())
  perfume Perfume @relation(fields: [perfumeId], references: [id], onDelete: Cascade)
  perfumeId Int
  wornOn DateTime
}

model PerfumeSuggested {
  id Int @id @default(autoincrement())
  perfume Perfume @relation(fields: [perfumeId], references: [id], onDelete: Cascade)
  perfumeId Int
  suggestedOn DateTime
}

model PerfumeTag {
  id Int @id @default(autoincrement())
  perfume Perfume @relation(fields: [perfumeId], references: [id], onDelete: Cascade)
  perfumeId Int
  tag Tag @relation(fields: [tagId], references: [id])
  tagId Int
}

model Tag {
  id Int @id @default(autoincrement())
  tag String @unique
  color String
  perfumetags PerfumeTag[]
}

model Recommendation {
  id Int @id @default(autoincrement())
  query String
  recommendations String
  date DateTime @default(now())
}